from typing import Dict, Union, Self, List
from urllib.parse import urljoin
from os.path import splitext
from pathlib import Path

import yaml
import re

from parsers.parser import Parser as BaseParser
from util import get_project_root
from schema import Document


class Parser(BaseParser):
    def parse(self, source: Dict[str, Union[str, Path, Self]]) -> List[Document]:
        docs = []
        files = super()._get_files(source['dat'])

        for file in files:
            src = {
                'url': urljoin(source['url'], str(splitext(file.relative_to(source['dat']))[0])),
                'dat': file,
            }

            data = file.read_text()
            header = re.search(r'---([\S\s]*?)---', data, re.MULTILINE)[0]
            data = data.split(header)[1]
            header = yaml.safe_load(header.strip('---').strip().replace('\t', '    '))

            tags = [super()._tokenize(tag) for tag in header['tags']] if header['tags'] else []
            tags = [w for r in tags for w in r]

            docs.append(Document(
                src=src,
                title=super()._tokenize(header['title']),
                description=super()._tokenize(header['description']),
                tags=tags,
                body=super()._tokenize(data),
            ))

        return docs
